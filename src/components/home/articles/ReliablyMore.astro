---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

import Stack1 from "@/assets/images/reliably/r-stack-1.webp";
import Stack2 from "@/assets/images/reliably/r-stack-2.webp";
import Stack3 from "@/assets/images/reliably/r-stack-3.webp";
---

<section class="reliably">
  <div class="reliablyContent">
    <h2 class="reliablyTitle text-center">More about Reliably</h2>
    <div class="reliablyContent__block">
      <div>
        <p>
          Reliably was a startup funded by the creators of the open source <a
            href="https://chaostoolkit.org/"
            target="_blank"
            rel="noopener noreferer">Chaos Toolkit</a
          >. Having helped them on branding work, I was asked to join their
          company, ChaosIQ, when it raised seed funding from Accel in early
          2019, to build a full-fledged chaos engineering platform on top of
          Chaos Toolkit.
        </p>
      </div>
      <div>
        <Icon name="chaos-toolkit" width="100%" height="auto" />
      </div>
    </div>
    <div class="reliablyContent__block">
      <div>
        <p>
          Upon years of creating the platform, building in new features, and I
          worked with various tech stacks, all revolving, for the front-end
          side, around Vue.js and TypeScript.
        </p>
        <p>
          The first version of the product, named ChaosIQ, was a dashboard and
          data platform for Chaos Toolkit. While experiments and execution data
          were stored locally by Chaos Toolkit, ChaosIQ allowed users to store
          data and experiments in a same place and share it with their team and
          within their organization, in order to make chaos engineering
          beneficial to a larger number of users.
        </p>
        <p>
          This version of the product was built using <strong
            >TypeScript, Vue.js 2, and Vuex store</strong
          >. This stack was used to build an SPA that fetched data from the APIs
          of a Python backend.
        </p>
      </div>
      <div>
        <Image
          src={Stack1}
          alt="The logos for TypeScript, Vue.js, and Python."
        />
      </div>
    </div>
    <div class="reliablyContent__block">
      <div>
        <p>
          In 2021, a major change in the product scope, evolving from a chaos
          engineering platform to an observability platform was the occasion to
          update the front-end stack, while the back-end went through a major
          overhaul.
        </p>
        <p>
          The new product, named Reliably, was built with <strong
            >TypeScript, the brand new (at the time) Vue 3 with the Composition
            API, and what was not yet the official Vue store, Pinia.</strong
          >. The back-end was written in Go, which honeslty made little
          difference to me, as my impact on the back-end codebase is limited at
          best.
        </p>
        <p>
          The introduction of GitHub Actions allowed switch our build and
          deployment process from Jenkins. The approachable YAML workflows makes
          it easy for each team to create and maintain workflows for their own
          products.
        </p>
      </div>
      <div>
        <Image
          src={Stack2}
          alt="The logos for Vue.js, Pinia, TypeScript and Go."
        />
      </div>
    </div>
    <div class="reliablyContent__block">
      <div>
        <p>
          In 2023, we attempted to lift two of the main friction points for
          users:
        </p>
        <ul>
          <li>letting them create experiments with a visual interface,</li>
          <li>running experiments without leaving the SaaS product.</li>
        </ul>
        <p>
          To accomodate for a smaller team, and the need for front-end to be
          manageable by non-(front-end)-specialists, I decided to use <a
            href="https://astro.build"
            target="_blank"
            rel="noopener noreferer"
          >
            Astro</a
          >, a static site generator we add been used for our website, as the
          foundation of the new Reliably. Coupled with the very lightweight,
          framework-agnostic, NanoStores, it serves as the basis for the
          platform, while all business-logic work can be written using any
          JavaScript framework, even mixing them it needed. I still decided to
          use Vue 3, and this new stack proved both <strong
            >performant and developer-friendly, allowing us to build new
            features at a quick pace</strong
          >.
        </p>
      </div>
      <div>
        <Image
          src={Stack3}
          alt="The logos for Astro, Vue.js, TypeScript and Python."
        />
      </div>
    </div>
  </div>
</section>

<style lang="scss">
  .reliably {
    grid-column: 1 / span 14;

    display: grid;
    grid-template-columns: subgrid;
    margin-top: calc(2 * var(--space-large));
    padding-top: var(--space-large);
    padding-bottom: calc(2 * var(--space-large));

    background-color: var(--grey-200);

    .reliablyContent {
      grid-column: 2 / span 12;

      display: grid;
      grid-template-columns: subgrid;

      &__block {
        grid-column: 1 / span 12;

        display: grid;
        grid-template-columns: subgrid;
        margin-top: var(--space-large);

        > div {
          grid-column-end: span 12;

          &:nth-child(2) {
            display: grid;
            place-content: center;
            padding-top: var(--space-large);

            img {
              display: block;
              height: auto;
              width: 100%;
              max-width: 20rem;
            }
          }

          @media (min-width: 54rem) {
            > div {
              grid-row-end: 1;
            }

            grid-column-end: span 6;

            &:nth-child(2) {
              padding-top: 0;
              padding-left: var(--space-large);
            }
          }
        }

        @media (min-width: 54rem) {
          &:nth-child(2n + 1) {
            > div {
              &:nth-child(2) {
                grid-row-start: 1;
                grid-column-start: 1;

                padding-left: 0;
                padding-right: var(--space-large);
              }

              &:first-child {
                grid-column-start: 7;
              }
            }
          }
        }
      }
    }

    .reliablyTitle {
      grid-column: 1 / span 12;

      margin-top: calc(-1 * var(--space-large));

      font-family: var(--body-font);
      font-size: clamp(2.4rem, 1.2rem + 5vw, 12rem);
      font-weight: 900;

      transform: translateY(-50%);
    }
  }
</style>

<style>
  /* 
  these type the CSS variable as color
  unlocking the ability for the browser 
  to animate just that portion
*/
  @property --＠color-1 {
    syntax: "<color>";
    inherits: false;
    initial-value: hsl(98 100% 62%);
  }

  @property --＠color-2 {
    syntax: "<color>";
    inherits: false;
    initial-value: hsl(204 100% 59%);
  }

  /* keyframes that change the color variable */
  @keyframes gradient-change {
    to {
      --＠color-1: hsl(210 100% 59%);
      --＠color-2: hsl(310 100% 59%);
    }
  }

  h2 {
    /* apply variable changes over time */
    animation: gradient-change 2s linear infinite alternate;

    background: linear-gradient(
      /* 
      in oklch produces more vibrant gradient results 
      learn more https://developer.chrome.com/docs/css-ui/access-colors-spaces#color_interpolation
    */
        to right in oklch,
      /* use the variables in a gradient (or wherever!) */ var(--＠color-1),
      var(--＠color-2)
    );

    /* old browser support */
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;

    /* modern browser version */
    background-clip: text;
    color: transparent;
  }

  @media (prefers-reduced-motion) {
    h2 {
      animation: none;
    }
  }
</style>
