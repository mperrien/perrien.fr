---
import { Image } from "astro:assets";

import Layout from "@/layouts/DefaultLayout.astro";

import VideoContainer from "@/components/ui/VideoContainer.astro";

import ReliablyMore from "@/components/home/articles/ReliablyMore.astro";

import Assistant01 from "@/assets/images/assistant/01-assistant-prompt.webp";
import Assistant02 from "@/assets/images/assistant/02-assistant-tag.webp";
import Assistant04 from "@/assets/images/assistant/04-assistant-configure.webp";
---

<Layout
  title="Reliably Assistant"
  description="The Reliably Assistant is an AI-powered way of creating and running chaos engineering experiments by just describing what you want to explore."
>
  <main class="page">
    <div class="assistantBackground" transition:name="transition-assistant">
      <h1><span>Reliably</span> <span>Assistant</span></h1>
    </div>
    <div class="assistantContent">
      <section class="assistantContent__intro">
        <p>
          After completing work on an experiment builder, the Reliably team
          decided to experiment using generative AI write experiments.
        </p>
      </section>

      <section>
        <h2 class="text-center">Easier experiments</h2>
        <p>
          The <a href="/experiment-builder/"
            >experiment builder removed a lot of complexity</a
          >, with Reliably users not needing to write JSON files anymore.
          Nevertheless, it still let them with over 200 activities (the basic
          building blocks) to choose from, which can be overwhelming. That's
          when <strong
            >we decided to experiment with using ChatGPT to write experiments</strong
          >.
        </p>
        <h3>Preventing hallucinations</h3>
        <p>
          As the corpus of publicly available JSON experiments is quite small
          (experiments are most often kept private by organizations), <strong
            >ChatGPT had a tendency to invent activities</strong
          > when requested to write experiments.
        </p>
        <p>
          To workaround this problem, we provide him with the list of activities
          and their descriptions, as a pre-promt. We also require it to only use
          activities from this pre-existing pool.
        </p>
        <h3>Defining the output</h3>
        <p>
          Finally, we specify an output format in JSON, that can be passed to,
          and parsed by, the front-end interface.
        </p>
      </section>

      <section class="workflow">
        <h2 class="text-center">The workflow</h2>
        <ol class="list-reset">
          <li class="workflowStep">
            <div class="workflowStep__content">
              <h3>Ask a question</h3>
              <p>
                When a user clicks on the Reliably Assistant button, the regular
                interface is replaced by the Assistant interface, which displays
                a single field where the user can ask a question.
              </p>
            </div>
            <div class="workflowStep__media">
              <Image
                src={Assistant01}
                alt="The Assistant prompts 'How can I help you', and the user types in a field: 'Fail an AZ, please'"
              />
            </div>
          </li>
          <li class="workflowStep">
            <div class="workflowStep__content">
              <h3>Specify a target system</h3>
              <p>
                The Assistant then asks the user to select a target system. It
                will allow the Assistant to only pick activities that work with
                the user's system.
              </p>
              <p>
                Asking the user to select options from a list is both
                straightforward and more efficient than letting ChatGPT guess it
                from the original question.
              </p>
            </div>
            <div class="workflowStep__media">
              <Image
                src={Assistant02}
                alt="The Assistant says 'Tags help me build an experiment with activities that are more suitable to your system. Select one or more tags and press Enter to continue.' The available tags are AWS, Google Cloud, and Kubernetes. AWS is selected."
              />
            </div>
          </li>
          <li class="workflowStep">
            <div class="workflowStep__content">
              <h3>Experiment creation</h3>
              <p>
                ChatGPT returns its answer as a streamed JSON file. Rather than
                waiting for the experiment to be complete before displaying it
                (ChatGPT 4 sometimes takes its time), we display selected
                activities on the fly, by fetching the result JSON file every 30
                seconds, until it's returned as complete.
              </p>
            </div>
            <div class="workflowStep__media">
              <VideoContainer
                src="/assets/video/assistant-03-create.mp4"
                poster="/assets/video/assistant-03-create.webp"
                alt="The Assistant creates the experiment by adding activities."
                height="1080"
                width="1152"
                shadow={true}
                rounded={true}
              />
            </div>
          </li>
          <li class="workflowStep">
            <div class="workflowStep__content">
              <h3>Configuration</h3>
              <p>
                The Assistant then prompts the user for required information
                regarding each activity, such as targets or thresholds.
              </p>
            </div>
            <div class="workflowStep__media">
              <Image
                src={Assistant04}
                alt="The Assistant asks for some required information for each activity. For example, it asks for the Target Availability Zone. The user has typed eu-central-1a."
              />
            </div>
          </li>
          <li class="workflowStep">
            <div class="workflowStep__content">
              <h3>Run</h3>
              <p>
                The Assistant can then run the experiment in the cloud, and log
                its results.
              </p>
            </div>
            <div class="workflowStep__media">
              <VideoContainer
                src="/assets/video/assistant-05-run.mp4"
                poster="/assets/video/assistant-05-run.webp"
                alt="A yellow loader is pulsing under the message 'Your experiment is scheduled and will start soon'. Then, the loader color turns green and the message changes to 'Your experiment is running'. Finally, the message 'Experiment completed!' is displayed with a party popper emoji (ðŸŽ‰)."
                height="720"
                width="1310"
                shadow={true}
                rounded={true}
              />
            </div>
          </li>
        </ol>
      </section>
    </div>
    <div class="assistantYT">
      <iframe
        width="560"
        height="315"
        src="https://www.youtube.com/embed/mfvxBmrAnss?si=r9hr0yUE1UGM4N0C"
        title="YouTube video player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        referrerpolicy="strict-origin-when-cross-origin"
        allowfullscreen></iframe>
    </div>
    <ReliablyMore />
  </main>

  <style lang="scss">
    .page {
      display: grid;
      grid-template-columns:
        max(calc(50vw - (var(--max-width) / 2)), var(--space-small))
        repeat(12, 1fr)
        max(calc(50vw - (var(--max-width) / 2)), var(--space-small));
      overflow-x: hidden;

      @media (min-width: 54rem) {
        gap: var(--space-small);
      }

      @media (min-width: 72rem) {
        gap: var(--space-medium);
      }

      .assistantBackground {
        grid-column: 1 / span 14;

        display: grid;
        grid-template-columns: subgrid;
        place-content: center;
        height: 100vh;
        min-height: 48rem;

        background: transparent
          url("/assets/images/jr-korpa-9XngoIpxcEo-unsplash-60-800.jpg")
          no-repeat center center / cover;

        @media (min-width: 800px) {
          background-image: url("/assets/images/jr-korpa-9XngoIpxcEo-unsplash-60-1080.jpg");
        }

        @media (min-width: 1200px) {
          background-image: url("/assets/images/jr-korpa-9XngoIpxcEo-unsplash-60-1440.jpg");
        }

        @media (min-width: 1600px) {
          background-image: url("/assets/images/jr-korpa-9XngoIpxcEo-unsplash-60-1920.jpg");
        }

        h1 {
          grid-column: 2 / span 12;

          color: white;
          font-family: "Barlow", var(--body-font);
          text-align: center;

          > span {
            display: block;

            text-align: center;

            &:first-child {
              position: relative;
              z-index: 2;

              color: hsl(329, 100%, 95%);
              font-size: clamp(6rem, 8vw, 10rem);
              text-shadow: var(--box-shadow-sharp);
              font-weight: 900;
            }

            &:last-child {
              margin-top: clamp(-9rem, -9vw, -4rem);

              font-weight: 900;

              font-size: clamp(7rem, 20vw, 24rem);
            }
          }
        }
      }

      .assistantContent {
        grid-column: 2 / span 12;

        &__intro {
          margin-top: calc(2 * var(--space-large));

          font-family: var(--display-font);
          font-size: 3.2rem;
          // text-align: center;
        }

        > section + section {
          margin-top: calc(3 * var(--space-large));
        }

        > section {
          > h2,
          > h3,
          > p {
            margin-right: auto;
            margin-left: auto;
            width: 100%;
            max-width: 84rem;
          }

          h2,
          h3 {
            font-family: var(--body-font);
          }

          h2 {
            margin-bottom: var(--space-large);
          }

          &.workflow {
            counter-reset: workflow;

            h2 {
              margin-bottom: calc(2 * var(--space-large));
            }

            .workflowStep + .workflowStep {
              margin-top: calc(3 * var(--space-large));
            }

            .workflowStep {
              counter-increment: workflow;

              position: relative;

              display: grid;
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(32rem, 1fr));
              gap: var(--space-large);

              &::before {
                content: counter(workflow);

                position: absolute;
                top: -6rem;
                left: calc(50% - 5rem);
                z-index: 1;

                display: grid;
                place-content: center;
                height: 10rem;
                width: 10rem;

                background-color: var(--orange);
                border-radius: 50%;

                color: white;
                font-size: 7.2rem;
                font-weight: 600;

                transform: translateY(30rem) scale(0.1);
                transition: transform 3s ease-in-out;
              }

              &__content,
              &__media {
                position: relative;
                z-index: 3;

                align-self: center;
              }

              &__content {
                h3 {
                  display: flex;
                  align-items: baseline;
                  gap: 0.2rem;

                  font-family: var(--body-font);

                  &::after {
                    content: "";
                    display: block;
                    height: 1.2rem;
                    width: 1.2rem;
                    background: var(--orange);
                    border-radius: 50%;
                  }
                }
              }

              &__media {
                @media (min-width: 45.7rem) {
                  grid-column-start: 2;
                }

                img {
                  display: block;
                  height: auto;

                  border: 0.1rem solid var(--grey-200);
                  border-radius: var(--border-radius-m);
                  box-shadow: var(--box-shadow-diffuse);
                }
              }

              &:nth-child(2n) {
                @media (min-width: 45.7rem) {
                  .workflowStep__content {
                    grid-column-start: 2;
                  }

                  .workflowStep__media {
                    grid-column-start: 1;
                    grid-row-start: 1;
                  }
                }
              }

              &.isVisible {
                &::before {
                  animation: 0.6s ease-in-out pop forwards;
                }
              }
            }
          }
        }
      }

      .assistantYT {
        grid-column: 2 / span 12;

        margin-top: calc(3 * var(--space-large));
        margin-bottom: calc(2 * var(--space-large));

        iframe {
          height: 100%;
          width: 100%;
          margin-top: var(--space-small);
          margin-bottom: var(--space-small);

          aspect-ratio: 16/9;

          border-radius: var(--border-radius-m);
          box-shadow: var(--box-shadow-diffuse);
        }
      }
    }

    @font-face {
      font-family: "Barlow";
      font-style: normal;
      font-weight: 900;
      src:
        local(""),
        url("/assets//fonts/barlow-v12-latin-900.woff2") format("woff2"),
        /* Chrome 26+, Opera 23+, Firefox 39+ */
          url("/assets/fonts/barlow-v12-latin-900.woff") format("woff"); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
    }

    @keyframes pop {
      0% {
        transform: translateY(30rem) scale(0.1);
      }
      30% {
        transform: translateY(21rem) scale(0.3);
      }
      75% {
        transform: translateY(5rem) scale(0.7);
      }
      80% {
        transform: translateY(1rem) scale(1.1);
      }
      84% {
        transform: translateY(-4rem) scale(1);
      }
      88% {
        transform: translateY(-4rem) scale(0.9);
      }
      92% {
        transform: translateY(-4rem) scale(1);
      }
      96% {
        transform: translateY(-4rem) scale(1.1);
      }
      100% {
        transform: translateY(-4rem) scale(1);
      }
    }
  </style>

  <script>
    const stepObserverOptions = {
      rootMargin: "0%",
      threshold: 0.5,
    };

    const stepObserver = new IntersectionObserver(
      stepObserverCallback,
      stepObserverOptions,
    );

    function stepObserverCallback(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver,
    ) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("isVisible");
        }
      });
    }

    document.querySelectorAll(".workflowStep").forEach((s) => {
      if (s) {
        stepObserver.observe(s);
      }
    });
  </script>
</Layout>
